#!/bin/bash

if [ ${DIB_DEBUG_TRACE:-0} -gt 0 ]; then
    set -x
fi
set -eu
set -o pipefail

[ -n "$ARCH" ]
[ -n "$TARGET_ROOT" ]

if [ 'amd64' = "$ARCH" ] ; then
    ARCH="x86_64"
fi

DIB_CLOUD_IMAGES=http://clouddata.cloud.suse.de/images/${ARCH}/
BASE_IMAGE_FILE=SLES12-SP3.qcow2
BASE_IMAGE_TAR=${BASE_IMAGE_FILE//.qcow2}.${ARCH}.tgz
IMAGE_LOCATION=$DIB_CLOUD_IMAGES/$BASE_IMAGE_FILE
CACHED_IMAGE=$DIB_IMAGE_CACHE/$BASE_IMAGE_FILE
CACHED_TAR=$DIB_IMAGE_CACHE/$BASE_IMAGE_TAR

#echo "Fetching Base Image"
#$TMP_HOOKS_PATH/bin/cache-url $DIB_CLOUD_IMAGES/$BASE_IMAGE_FILE $CACHED_IMAGE
#
#if [ ! -f $CACHED_TAR -o \
#    $CACHED_IMAGE -nt $CACHED_TAR ] ; then
#    echo "Repacking base image as tarball."
#
#    WORKING=$(mktemp --tmpdir=${TMP_DIR:-/tmp} -d)
#    EACTION="rm -r $WORKING"
#    trap "$EACTION" EXIT
#    echo "Working in $WORKING"
#
#    RAW_FILE=$(mktemp --tmpdir=$WORKING XXXXXX.raw)
#
#    if [ "${CACHED_IMAGE: -3}" == ".xz" ] ; then
#        QCOW2_FILE=$(mktemp --tmpdir=$WORKING XXXXXX.qcow2)
#        # This leaves the old image in place so cache-url wont get it again
#        unxz --stdout $CACHED_IMAGE > $QCOW2_FILE
#        CACHED_IMAGE=$QCOW2_FILE
#    fi
#
#    qemu-img convert -f qcow2 -O raw $CACHED_IMAGE $RAW_FILE
#
#    ROOT_PARTITION=p$(sudo kpartx -l $RAW_FILE | awk "/loop[0-9]+p/"|wc -l)
#    sudo udevadm settle
#
#    # kpartx fails if no /dev/loop* exists, "losetup -f" prints first unused
#    # loop device and creates it if it doesn't exist
#    sudo losetup -f
#
#    # XXX: Parsing stdout is dangerous, would like a better way to discover
#    #      the device used for the image.
#    ROOT_LOOPDEV=$(sudo kpartx -av $RAW_FILE | \
#        awk "/loop[0-9]+$ROOT_PARTITION/ {print \$3}")
#    # If running inside Docker, make our nodes manually, because udev will not be working.
#    if [ -f /.dockerenv ]; then
#        sudo dmsetup --noudevsync mknodes
#    fi
#    if ! timeout 5 sh -c "while ! [ -e /dev/mapper/$ROOT_LOOPDEV ]; do sleep 1; done"; then
#        echo "Error: Could not find /dev/mapper/$ROOT_LOOPDEV"
#        exit 1
#    fi
#    EACTION="sudo kpartx -d $RAW_FILE ; $EACTION"
#    trap "$EACTION" EXIT
#    mkdir $WORKING/mnt
#    if [ "xfs" = "$(sudo blkid -o value -s TYPE /dev/mapper/$ROOT_LOOPDEV)" ]; then
#        # mount xfs with nouuid, just in case that uuid is already mounted
#        MOUNTOPTS="-o nouuid"
#    else
#        MOUNTOPTS=""
#    fi
#
#    sudo mount $MOUNTOPTS /dev/mapper/$ROOT_LOOPDEV $WORKING/mnt
#    EACTION="sudo umount -f $WORKING/mnt ; $EACTION"
#    trap "$EACTION" EXIT
#
#    # find out if chroot tar has full xattr support
#    if [ 0 == `sudo chroot $WORKING/mnt bin/tar --help | grep -c xattrs-exclude` ]; then
#        TAROPTS="--no-xattrs"
#    else
#        TAROPTS="--xattrs --xattrs-include=* --xattrs-exclude=security.selinux"
#    fi
#    # Chroot in so that we get the correct uid/gid
#    sudo chroot $WORKING/mnt bin/tar $TAROPTS -cz . > $WORKING/tmp.tar
#    mv $WORKING/tmp.tar $CACHED_TAR
#else
#    echo "Using cached tar from $CACHED_TAR"
#fi
#
## Extract the base image (use --numeric-owner to avoid UID/GID mismatch between
## image tarball and host OS)
#sudo tar -C $TARGET_ROOT --numeric-owner -xzf $CACHED_TAR
$TMP_HOOKS_PATH/bin/extract-image $BASE_IMAGE_FILE $BASE_IMAGE_TAR $IMAGE_LOCATION $CACHED_IMAGE
